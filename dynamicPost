const fs=require('fs')
const path=require('path')
const rootDir=require('../util1/path')
const express=require('express')
const p=path.join(rootDir,'data','data.json')

module.exports=class Cart{
    static addProducts(id,price,size){
        
        fs.readFile(p,(err,fileContent)=>{
            let cart={products:[],totoalPrice:0}
            if(!err){
            cart=JSON.parse(fileContent)
            }
            if(cart.products.size===m){
            
            const existingProductIndex=cart.products.findIndex(prod=>prod.id===id)
            const existingProduct=cart.products[existingProductIndex]
            let updatedProduct;
            if(existingProduct){
            updatedProduct={...existingProduct}
            updatedProduct.qty=updatedProduct.qty+1;
            cart.products=[...cart.products,updatedProduct]
            cart.products[existingProductIndex]=updatedProduct
            }else{
             updatedProduct={id:id,qty:1}
             cart.products=[...cart.products,updatedProduct]
            }
            cart.totoalPrice=cart.totoalPrice+price;
            fs.writeFile(p,JSON.stringify(cart),err=>{
                console.log(err);
            })
        }else{
            const existingProductIndex=cart.products.findIndex(prod=>prod.id===id)
            const existingProduct=cart.products[existingProductIndex]
            let updatedProduct;
            if(existingProduct){
            updatedProduct={...existingProduct}
            updatedProduct.qty=updatedProduct.qty+1;
            cart.products=[...cart.products,updatedProduct]
            cart.products[existingProductIndex]=updatedProduct
            }else{
             updatedProduct={id:id,qty:1}
             cart.products=[...cart.products,updatedProduct]
            }
            cart.totoalPrice=cart.totoalPrice+price;
            fs.writeFile(p,JSON.stringify(cart),err=>{
                console.log(err);
            })
        }
        })
 
    }
    
}const fs=require('fs')
const path=require('path')
const rootDir=require('../util1/path')
const express=require('express')
const p=path.join(rootDir,'data','data.json')

module.exports=class Cart{
    static addProducts(id,price,size){
        
        fs.readFile(p,(err,fileContent)=>{
            let cart={products:[],totoalPrice:0}
            if(!err){
            cart=JSON.parse(fileContent)
            }
            if(cart.products.size===m){
            
            const existingProductIndex=cart.products.findIndex(prod=>prod.id===id)
            const existingProduct=cart.products[existingProductIndex]
            let updatedProduct;
            if(existingProduct){
            updatedProduct={...existingProduct}
            updatedProduct.qty=updatedProduct.qty+1;
            cart.products=[...cart.products,updatedProduct]
            cart.products[existingProductIndex]=updatedProduct
            }else{
             updatedProduct={id:id,qty:1}
             cart.products=[...cart.products,updatedProduct]
            }
            cart.totoalPrice=cart.totoalPrice+price;
            fs.writeFile(p,JSON.stringify(cart),err=>{
                console.log(err);
            })
        }else{
            const existingProductIndex=cart.products.findIndex(prod=>prod.id===id)
            const existingProduct=cart.products[existingProductIndex]
            let updatedProduct;
            if(existingProduct){
            updatedProduct={...existingProduct}
            updatedProduct.qty=updatedProduct.qty+1;
            cart.products=[...cart.products,updatedProduct]
            cart.products[existingProductIndex]=updatedProduct
            }else{
             updatedProduct={id:id,qty:1}
             cart.products=[...cart.products,updatedProduct]
            }
            cart.totoalPrice=cart.totoalPrice+price;
            fs.writeFile(p,JSON.stringify(cart),err=>{
                console.log(err);
            })
        }
        })
 
    }
    
}
